int UCrusaderTargetFinder::FindTarget(bool hasItem, bool hasGrenade, FVector& targetLoc, AHeroCharacter*& target)
{
	TArray<AHeroCharacter*> herosInRange;
	TArray<AHeroCharacter*> aIMechUnits;
	TArray<int> mechIndex;
	FVector actorLoc = Owner->GetActorLocation();
	float smallDist = 0;
	bool switchWeapon = false;
	bool canReach = false;
	int targetIndex = 0;

	//Returns 2 if Crusader should use an item
	if (hasItem && hasGrenade)
	{
		herosInRange = GetHerosInRange(actorLoc, Owner->statsList[4] + itemList[activeItem].X);

		if (herosInRange.Num() > 1)
		{
			//Finds which two hero units in the item's attack range are closest to each other
			for (int i = 0; i < herosInRange.Num(); i++)
			{
				for (AHeroCharacter* hero : herosInRange)
				{
					if (herosInRange[i] != hero)
					{
						if (FVector::Dist(herosInRange[i]->GetActorLocation(), hero->GetActorLocation()) <=
							itemList[activeItem].Z)
						{
							mechIndex.Add(i);
							canReach = true;
						}
					}
				}
			}

			if (canReach)
			{
				smallDist = FVector::Dist(actorLoc, herosInRange[mechIndex[0]]->GetActorLocation());

				for (int i : mechIndex)
				{
					if (FVector::Dist(actorLoc, herosInRange[i]->GetActorLocation()) < smallDist)
					{
						targetIndex = i;
						smallDist = FVector::Dist(actorLoc, herosInRange[i]->GetActorLocation());
					}
				}

				target = herosInRange[targetIndex];
				targetLoc = target->GetActorLocation();
				return 2;
			}
		}
	}

	//Checks if Owner is the only enemy in the turn order
	if (combatManager->FindAIMechInTurnOrder(Owner) != nullptr)
	{
		herosInRange.Empty();

		//Returns 0 if no hero mechs are in Crusader's attack range
		//Returns 4 if Crusader should Melee attack a Hero
		//Returns 5 if Crusader should shoot a Hero
		if (Owner->IsRangeWeapon())
		{
			herosInRange = GetHerosInRange(aIMechUnits, actorLoc, Owner->statsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z, switchWeapon);

			if (!herosInRange.IsEmpty())
			{
				if (switchWeapon)
				{
					//Switches Crusader's weapon to one of his melee weapons
					Owner->ActiveWeapon = FMath::RandRange(0, 1);
					target = GetHeroClosestToEnemy(herosInRange, aIMechUnits);
					targetLoc = target->GetActorLocation();
					return 4;

				}
				else
				{
					if (herosInRange.Num() == 1)
					{
						target = herosInRange[0];
						targetLoc = target->GetActorLocation();

						return 5;
					}
					else
					{
						target = GetHeroClosestToEnemy(herosInRange, aIMechUnits);
						targetLoc = target->GetActorLocation();
						return 5;

					}
				}
			}
			else
			{
				target = GetClosestHero(actorLoc);
				targetLoc = target->GetActorLocation();
				return 0;
			}
		}
		else
		{
			herosInRange = GetHerosInRange(aIMechUnits, actorLoc, Owner->CurrentStatsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z);

			if (!herosInRange.IsEmpty())
			{
				if (herosInRange.Num() == 1)
				{
					target = herosInRange[0];
					targetLoc = target->GetActorLocation();

					return 4;
				}
				else
				{
					target = GetHeroClosestToEnemy(herosInRange, aIMechUnits);
					targetLoc = target->GetActorLocation();
					return 4;
				}
			}
			else
			{
				Owner->ActiveWeapon = 2;

				herosInRange = GetHerosInRange(actorLoc, Owner->CurrentStatsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z);

				if (!herosInRange.IsEmpty())
				{
					if (herosInRange.Num() == 1)
					{
						target = herosInRange[0];
						targetLoc = target->GetActorLocation();

						return 5;
					}
					else
					{
						target = GetHeroClosestToEnemy(herosInRange, aIMechUnits);
						targetLoc = target->GetActorLocation();
						return 5;
					}
				}
				else
				{
					target = GetClosestHero(actorLoc);
					targetLoc = target->GetActorLocation();
					return 0;
				}
			}
		}
	}
	//If Owner is the only emeny unit in the turn order
	else
	{
		//Returns 0 if no hero mechs are in Crusader's attack range
		//Returns 4 if Crusader should Melee attack a Hero
		//Returns 5 if Crusader should shoot a Hero
		if (Owner->IsRangeWeapon())
		{
			herosInRange = GetHerosInRange(actorLoc, Owner->CurrentStatsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z, switchWeapon);
			
			if (!herosInRange.IsEmpty())
			{
				target = GetClosestHeroInRange(herosInRange, actorLoc);
				targetLoc = target->GetActorLocation();

				if (switchWeapon)
				{
					//Switches Crusader's weapon to one of his melee weapons
					Owner->ActiveWeapon = FMath::RandRange(0, 1);
					return 4;
				}
				else
					return 5;
			}
			else
			{
				target = GetClosestHero(actorLoc);
				targetLoc = target->GetActorLocation();
				return 0;
			}
		}
		else
		{
			herosInRange = GetHerosInRange(actorLoc, Owner->CurrentStatsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z);

			//Switches to range weapon if no heros are in melee range
			if (herosInRange.IsEmpty())
			{
				Owner->ActiveWeapon = 2;
				herosInRange = GetHerosInRange(actorLoc, Owner->CurrentStatsList[4] + Owner->WeaponStats[Owner->ActiveWeapon].Z);

				if (herosInRange.IsEmpty())
				{
					target = GetClosestHero(actorLoc);
					targetLoc = target->GetActorLocation();
					return 0;
				}
				else
				{
					target = GetClosestHeroInRange(herosInRange, actorLoc);
					targetLoc = target->GetActorLocation();
					return 5;
				}
			}
			else
			{
				target = GetClosestHeroInRange(herosInRange, actorLoc);
				targetLoc = target->GetActorLocation();
				return 4;
			}
		}
	}
}